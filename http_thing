# Ex 4.4 - HTTP Server Shell
# Author: Barak Gonen
# Purpose: Provide a basis for Ex. 4.4
# Note: The code is written in a simple way, without classes, log files or other utilities, for educational purpose
# Usage: Fill the missing functions and constants

# TO DO: import modules
import socket

# TO DO: set constants
IP = '127.0.0.1'
PORT = 80
SOCKET_TIMEOUT = 10
FIXED_RESPONSE = 'HTTP/1.1 200 OK\r\n'
DEFAULT_URL = r"C:\Users\omerf\OneDrive\שולחן העבודה\idan_proj\client side\index.html"
REDIRECTION_DICTIONARY = {}


def get_file_data(filename):
    """ Get data from file """
    with open(filename, 'rb') as f:
        return f.read()


def handle_client_request(resource, client_socket):
    """ Check the required resource, generate proper HTTP response and send to client"""
    # TO DO : add code that given a resource (URL and parameters) generates the proper response
    # return


    if resource == '':
        url = DEFAULT_URL
    else:
        url = resource

    # TO DO: check if URL had been redirected, not available or other error code. For example:
    if url in REDIRECTION_DICTIONARY:
        # TO DO: send 302 redirection response
        pass
    http_response = "shalom".encode()
    try:
        filetype = url.split('.')[1]
        http_header = ""
        if filetype == 'js':
            http_header ="Content-Type: text/javascript; charset=UTF-8\r\n"
        elif filetype == 'html':
            http_header = "Content-Type: text/html; charset=utf-8\r\n"  # TO DO: generate proper HTTP header
        elif filetype == 'jpg':
            http_header = "Content-Type: image/jpeg;\r\n"  # TO DO: generate proper jpg header
        elif filetype == 'ico':
            http_header = "Content-Type: image/x-icon;\r\n"  # TO DO: generate proper jpg header
        
        elif filetype == 'css':
            http_header ="Content-Type: text/css\r\n"
        # TO DO: handle all other headers

        filename = r'C:\Users\omerf\OneDrive\שולחן העבודה\idan_proj\client side\index.html'
        #filename = r'C:\Users\omerf\OneDrive\שולחן העבודה\tomer\idan&UDI\index.html'
        data = bytes()

        try:
            data = get_file_data(filename)
            print(f"Reading {filename}")
            if True:
                http_header += f'Content-Length: {len(data)}\r\n\r\n'
            #http_response = http_header.encode() + data
            http_response = http_header.encode() + data
        except:
            print(f"couldt open {filename}")
    except:
        if "calculate-next" in url:
            num = int(url[len(url)-1]) +1
            http_response = ("Content-Type: text/html; charset=utf-8\r\n" + f'Content-Length: {len(str(num))}\r\n\r\n' +f"{num}").encode()
        if "calculate-area":
            num = url.split("=")
            n1 = int(num[1][0]) * int(num[2][0]) /2
            http_response = ("Content-Type: text/html; charset=utf-8\r\n" + f'Content-Length: {len(str(n1))}\r\n\r\n' +f"{n1}").encode()
            
    
   
    client_socket.send(http_response)


def validate_http_request(request):
    """
    Check if request is a valid HTTP request and returns TRUE / FALSE and the requested URL
    """
    # TO DO: write function
    if request.startswith('GET'):
        print("valid url:", request[5:].split(' ')[0])
        return True, request[5:].split(' ')[0]
    return False, None

def handle_client(client_socket):
    """ Handles client requests: verifies client's requests are legal HTTP, calls function to handle the requests """
    print('Client connected')
    client_socket.send(FIXED_RESPONSE.encode())

    while True:
        client_request = client_socket.recv(1024).decode()
        #print("g ",client_request)
        valid_http, resource = validate_http_request(client_request)
        if valid_http:
            print('Got a valid HTTP request')
            handle_client_request(resource, client_socket)
            break
        else:
            print('Error: Not a valid HTTP request')
            break

    print('Closing connection')
    client_socket.close()


def main():
    # Open a socket and loop forever while waiting for clients
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((IP, PORT))
    server_socket.listen()
    print("Listening for connections on port {}".format(PORT))

    while True:
        client_socket, client_address = server_socket.accept()
        print('New connection received')
        client_socket.settimeout(SOCKET_TIMEOUT)
        handle_client(client_socket)

if __name__ == "__main__":
    # Call the main handler function
    main()